# Given a parameter definition, generates necessary C++, Python and XML bindings


def main():
    # read the input definition

    # name, description, datatype, default
    PARAMS = {
        'common': [
            ('bathymetry_path', '', 'string', 'data/Paleotopography_bathymetry/Golonka_rev210'),
            ('BathymetrySuffix', '', 'string', 'Ma_Golonka.xyz'),
            ('verbose', '', 'bool', False),
        ],
        'atmosphere': [
            ('velocity_iter_max', '', 'int', 2),
            ('pressure_iter_max', '', 'int', 2),
            ('coriolis', 'coriolis force', 'double', 1.0),
            ('centrifugal', 'centrifugal force', 'double', 1.0),
            ('WaterVapour', 'water vapour', 'double', 1.0),
            ('buoyancy', 'buoyancy', 'double', 1.0),
            ('CO2', 'CO2', 'double', 1.0),

        ],
        'hydrosphere': [

        ]
    }

    XML_READ_FUNCS = {
        "string": "FillStringWithElement",
        "double": "FillDoubleWithElement",
        "int": "FillIntWithElement",
        "bool": "FillBoolWithElement"
    }

    def write_cpp_defaults(filename, classname, sections):
        with open(filename, 'w') as f:
            f.write("// THIS FILE IS AUTOMATICALLY GENERATED BY param.py\n")
            f.write("// ANY CHANGES WILL BE OVERWRITTEN AT COMPILE TIME\n")
            f.write("\n")
            f.write("void %s::SetDefaultConfig() {\n" % classname)

            for section in sections:
                f.write('\n  // %s section\n' % section)

                for slug, desc, ctype, default in PARAMS[section]:
                    rhs = default
                    if ctype == 'string':
                        rhs = '"%s"' % default
                    elif ctype == 'bool':
                        if default:
                            rhs = 'true'
                        else:
                            rhs = 'false'

                    f.write('  %s = %s;\n' % (slug, rhs))

            f.write("}")

    def write_cpp_load_config(filename, classname, sections):
        with open(filename, 'w') as f:
            f.write("// THIS FILE IS AUTOMATICALLY GENERATED BY param.py\n")
            f.write("// ANY CHANGES WILL BE OVERWRITTEN AT COMPILE TIME\n")
            f.write("\n")

            for section in sections:
                f.write('\n  // %s section\n' % section)
                element_var_name = 'elem_%s' % section
                f.write('\n  const tinyxml2::XMLElement *%s = atom->FirstChildElement("%s");\n' % (element_var_name, section))
                f.write('\n  if (%s) {\n' % (element_var_name))

                for slug, desc, ctype, default in PARAMS[section]:
                    func_name = XML_READ_FUNCS[ctype]
                    f.write('    Config::%s(%s, "%s", %s);\n' % (func_name, element_var_name, slug, slug))
                f.write("  }\n")

    def write_cpp_headers(filename, sections):
        with open(filename, 'w') as f:
            f.write("// THIS FILE IS AUTOMATICALLY GENERATED BY param.py\n")
            f.write("// ANY CHANGES WILL BE OVERWRITTEN AT COMPILE TIME\n")
            f.write("\n")

            for section in sections:
                f.write('\n// %s section\n' % section)

                for slug, desc, ctype, default in PARAMS[section]:
                    f.write('%s %s;\n' % (ctype, slug))

    for filename, classname, sections in [
        ('atmosphere/cAtmosphereDefaults.cpp.inc', 'cAtmosphereModel', ['common', 'atmosphere']),
        ('hydrosphere/cHydrosphereDefaults.cpp.inc', 'cHydrosphereModel', ['common', 'hydrosphere'])
    ]:
        write_cpp_defaults(filename, classname, sections)

    for filename, classname, sections in [
        ('atmosphere/AtmosphereLoadConfig.cpp.inc', 'cAtmosphereModel', ['common', 'atmosphere']),
        ('hydrosphere/HydrosphereLoadConfig.cpp.inc', 'cHydrosphereModel', ['common', 'hydrosphere'])
    ]:
        write_cpp_load_config(filename, classname, sections)

    for filename, sections in [
        ('atmosphere/AtmosphereParams.h.inc', ['common', 'atmosphere']),
        ('hydrosphere/HydrosphereParams.h.inc', ['common', 'hydrosphere'])
    ]:
        write_cpp_headers(filename, sections)


    # write out the pxd/pyx files
    # write out the example config xml file
    # 2x loadconfig c++ functions

if __name__ == '__main__':
    main()
