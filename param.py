# Given a parameter definition, generates necessary C++, Python and XML bindings


def main():
    # read the input definition

    # name, description, datatype, default
    PARAMS = {
        'common': [
            ('bathymetry_path', '', 'string', 'data/Paleotopography_bathymetry/Golonka_rev210'),
            ('BathymetrySuffix', '', 'string', 'Ma_Golonka.xyz'),
            ('verbose', '', 'bool', False),
            ('output_path', 'directory where model outputs should be placed (must end in /)', 'string', 'output'),
        ],
        'atmosphere': [
            ('velocity_iter_max', '', 'int', 2),
            ('pressure_iter_max', '', 'int', 2),
            ('velocity_iter_max_2D', '', 'int', 2),
            ('pressure_iter_max_2D', '', 'int', 2),
            ('coriolis', 'coriolis force', 'double', 1.0),
            ('centrifugal', 'centrifugal force', 'double', 1.0),
            ('WaterVapour', 'water vapour', 'double', 1.0),
            ('buoyancy', 'buoyancy', 'double', 1.0),
            ('CO2', 'CO2', 'double', 1.0),

        ],
        'hydrosphere': [
            ('input_path', 'directory where Atmosphere output can be read (must end in /)', 'string', 'output'),
            ('velocity_iter_max', '', 'int', 5),
            ('pressure_iter_max', '', 'int', 5),
            ('velocity_iter_max_2D', '', 'int', 5),
            ('pressure_iter_max_2D', '', 'int', 5),
        ]
    }

    XML_READ_FUNCS = {
        "string": "FillStringWithElement",
        "double": "FillDoubleWithElement",
        "int": "FillIntWithElement",
        "bool": "FillBoolWithElement"
    }

    def write_cpp_defaults(filename, classname, sections):
        with open(filename, 'w') as f:
            f.write("// THIS FILE IS AUTOMATICALLY GENERATED BY param.py\n")
            f.write("// ANY CHANGES WILL BE OVERWRITTEN AT COMPILE TIME\n")
            f.write("\n")
            f.write("void %s::SetDefaultConfig() {\n" % classname)

            for section in sections:
                f.write('\n  // %s section\n' % section)

                for slug, desc, ctype, default in PARAMS[section]:
                    rhs = default
                    if ctype == 'string':
                        rhs = '"%s"' % default
                    elif ctype == 'bool':
                        if default:
                            rhs = 'true'
                        else:
                            rhs = 'false'

                    f.write('  %s = %s;\n' % (slug, rhs))

            f.write("}")

    def write_cpp_load_config(filename, classname, sections):
        with open(filename, 'w') as f:
            f.write("// THIS FILE IS AUTOMATICALLY GENERATED BY param.py\n")
            f.write("// ANY CHANGES WILL BE OVERWRITTEN AT COMPILE TIME\n")
            f.write("\n")

            for section in sections:
                f.write('\n  // %s section\n' % section)
                element_var_name = 'elem_%s' % section
                f.write('\n  const tinyxml2::XMLElement *%s = atom->FirstChildElement("%s");\n' % (element_var_name, section))
                f.write('\n  if (%s) {\n' % (element_var_name))

                for slug, desc, ctype, default in PARAMS[section]:
                    func_name = XML_READ_FUNCS[ctype]
                    f.write('    Config::%s(%s, "%s", %s);\n' % (func_name, element_var_name, slug, slug))
                f.write("  }\n")

    def write_cpp_headers(filename, sections):
        with open(filename, 'w') as f:
            f.write("// THIS FILE IS AUTOMATICALLY GENERATED BY param.py\n")
            f.write("// ANY CHANGES WILL BE OVERWRITTEN AT COMPILE TIME\n")
            f.write("\n")

            for section in sections:
                f.write('\n// %s section\n' % section)

                for slug, desc, ctype, default in PARAMS[section]:
                    f.write('%s %s;\n' % (ctype, slug))

    def write_pxi(filename, classname, sections):
        with open(filename, 'w') as f:
            f.write("# THIS FILE IS AUTOMATICALLY GENERATED BY param.py\n")
            f.write("# ANY CHANGES WILL BE OVERWRITTEN AT COMPILE TIME\n")
            f.write("\n")

            for section in sections:
                f.write('\n# %s section\n' % section)

                for slug, desc, ctype, default in PARAMS[section]:
                    f.write('property %s\n' % slug)
                    f.write('    def __get__(%s self):\n' % classname)
                    f.write('        self._check_alive()\n')
                    f.write('        return self._thisptr.%s\n' % slug)
                    f.write('\n')
                    f.write('    def __set__(%s self, value):\n' % classname)
                    f.write('        self._check_alive()\n')
                    f.write('        self._thisptr.%s = <%s> value\n' % (slug, ctype))
                    f.write('\n')

    def write_pxd(filename, model, sections):
        with open(filename, 'w') as f:
            # Sadly, Cython docs are incorrect on usage of 'include', so we must include a whole lot of boilerplate
            f.write("""# THIS FILE IS AUTOMATICALLY GENERATED BY param.py
# ANY CHANGES WILL BE OVERWRITTEN AT COMPILE TIME
cdef extern from "c%sModel.h":
    cppclass c%sModel:
        c%sModel() except +  # NB! std::bad_alloc will be converted to MemoryError
        void LoadConfig(const char *filename)
        void Run()
        void RunTimeSlice(int time_slice)
        """ % (model, model, model))

            for section in sections:
                f.write('        # %s section\n' % section)

                for slug, desc, ctype, default in PARAMS[section]:
                    f.write('        %s %s\n' % (ctype, slug))

    def write_config_xml(filename):
        with open(filename, 'w') as f:
            f.write('<atom>\n')

            for section in sections:
                f.write('    <%s>\n' % section)

                for slug, desc, ctype, default in PARAMS[section]:
                    if ctype == 'bool':
                        default = str(default).lower()  # Python uses True/False, C++, uses true/false

                    f.write('        <%s>%s</%s>  <!-- %s (%s) -->\n' % (slug, default, slug, desc, ctype))

                f.write('    </%s>\n' % section)
            f.write('</atom>')

    atmosphere_sections = ['common', 'atmosphere']
    hydrosphere_sections = ['common', 'hydrosphere']

    for filename, classname, sections in [
        ('atmosphere/cAtmosphereDefaults.cpp.inc', 'cAtmosphereModel', atmosphere_sections),
        ('hydrosphere/cHydrosphereDefaults.cpp.inc', 'cHydrosphereModel', hydrosphere_sections)
    ]:
        write_cpp_defaults(filename, classname, sections)

    for filename, classname, sections in [
        ('atmosphere/AtmosphereLoadConfig.cpp.inc', 'cAtmosphereModel', atmosphere_sections),
        ('hydrosphere/HydrosphereLoadConfig.cpp.inc', 'cHydrosphereModel', hydrosphere_sections)
    ]:
        write_cpp_load_config(filename, classname, sections)

    for filename, sections in [
        ('atmosphere/AtmosphereParams.h.inc', atmosphere_sections),
        ('hydrosphere/HydrosphereParams.h.inc', hydrosphere_sections)
    ]:
        write_cpp_headers(filename, sections)

    for filename, classname, sections in [
        ('python/atmosphere_params.pxi', 'Atmosphere', atmosphere_sections),
        ('python/hydrosphere_params.pxi', 'Hydrosphere', hydrosphere_sections)
    ]:
        write_pxi(filename, classname, sections)

    for filename, model, sections in [
        ('python/atmosphere_pxd.pxi', 'Atmosphere', atmosphere_sections),
        ('python/hydrosphere_pxd.pxi', 'Hydrosphere', hydrosphere_sections)
    ]:
        write_pxd(filename, model, sections)

    write_config_xml('examples/config.xml')

if __name__ == '__main__':
    main()
